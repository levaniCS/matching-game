{"version":3,"sources":["components/Card.js","redux/actions/board.js","components/Board.js","components/Stopwatch.js","components/Options.js","App.js","serviceWorker.js","redux/reducers/board.js","index.js"],"names":["Card","props","cardStyles","close","complete","className","onClick","framework","click","alt","src","shuffleCards","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","Board","openedCards","useSelector","state","board","openedFrameworks","finalList","finalizedFrameworks","isEnd","dispatch","useDispatch","handleClick","useCallback","name","index","type","actions","useEffect","setTimeout","isStarted","map","key","Stopwatch","lapse","toFixed","reducer","currentState","newState","Options","useReducer","running","setState","intervalRef","useRef","clearInterval","current","shuffle","startTime","Date","now","setInterval","disabled","App","Boolean","window","location","hostname","match","INITIAL_STATE","frameworks","duplicatedFrameworks","randomizedFrameworks","action","finalsList","push","concat","finalFrameworks","every","item","rootReducer","combineReducers","boardReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.81d50152.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) => {\r\n  const clicked = (framework) => {\r\n    props.click(framework);\r\n  };\r\n\r\n  const cardStyles =\r\n    'card' +\r\n    (!props.close ? ' opened' : '') +\r\n    (props.complete ? ' matched' : '');\r\n\r\n  return (\r\n    <div className={cardStyles} onClick={() => clicked(props.framework)}>\r\n      <div className='front'>?</div>\r\n      <div className='back'>\r\n        <img\r\n          alt={props.framework}\r\n          src={\r\n            'https://raw.githubusercontent.com/samiheikki/javascript-guessing-game/master/static/logos/' +\r\n            props.framework +\r\n            '.png'\r\n          }\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","export const SET_CARDS = 'SET_CARDS';\r\nexport const HANDLE_CARD_CLICK = 'HANDLE_CARD_CLICK';\r\nexport const CHECK_EQUALITY = 'CHECK_EQUALITY';\r\nexport const RESET_GAME = 'RESET_GAME';\r\n\r\nexport const setCards = () => {\r\n  return {\r\n    type: SET_CARDS,\r\n    shuffle: shuffleCards\r\n  };\r\n};\r\n\r\nexport const resetGame = () => {\r\n  return {\r\n    type: RESET_GAME\r\n  };\r\n};\r\n\r\nexport const handleFirstClick = (name, index) => {\r\n  return {\r\n    type: HANDLE_CARD_CLICK,\r\n    name,\r\n    index\r\n  };\r\n};\r\n\r\nexport const checkEquality = () => {\r\n  return {\r\n    type: CHECK_EQUALITY\r\n  };\r\n};\r\n/// its not action\r\nexport const shuffleCards = (array) => {\r\n  let currentIndex = array.length,\r\n    temporaryValue,\r\n    randomIndex;\r\n  while (0 !== currentIndex) {\r\n    randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex -= 1;\r\n    temporaryValue = array[currentIndex];\r\n    array[currentIndex] = array[randomIndex];\r\n    array[randomIndex] = temporaryValue;\r\n  }\r\n  return array;\r\n};\r\n","import React, { useEffect, useCallback } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport Card from './Card';\r\nimport * as actions from '../redux/actions/board';\r\n\r\nconst Board = () => {\r\n  const openedCards = useSelector((state) => state.board.openedFrameworks);\r\n  const finalList = useSelector((state) => state.board.finalizedFrameworks);\r\n  const isEnd = useSelector((state) => state.board.isEnd);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleClick = useCallback(\r\n    (name, index) => {\r\n      dispatch(actions.handleFirstClick(name, index));\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (openedCards.length === 2) {\r\n      setTimeout(() => {\r\n        dispatch(actions.checkEquality());\r\n      }, 800);\r\n    }\r\n  }, [dispatch, openedCards]);\r\n\r\n  let isStarted = <h1 className='message'>Play Again</h1>;\r\n\r\n  return (\r\n    <div className='playground'>\r\n      {!isEnd\r\n        ? finalList.map((framework, index) => {\r\n            return (\r\n              <Card\r\n                key={index}\r\n                framework={framework.name}\r\n                click={() => {\r\n                  handleClick(framework.name, index);\r\n                }}\r\n                close={framework.close}\r\n                complete={framework.complete}\r\n              />\r\n            );\r\n          })\r\n        : isStarted}\r\n    </div>\r\n  );\r\n};\r\nexport default Board;\r\n","import React from 'react';\r\n\r\nconst Stopwatch = (props) => {\r\n  return (\r\n    <div className='stopwatch'>\r\n      <label>{(props.lapse / 1000).toFixed(1)}</label>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Stopwatch;\r\n","import React, { useEffect, useReducer, useRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport * as actions from '../redux/actions/board';\r\nimport Stopwatch from './Stopwatch';\r\n\r\nconst reducer = (currentState, newState) => {\r\n  return { ...currentState, ...newState };\r\n};\r\n\r\nconst Options = () => {\r\n  const finalList = useSelector((state) => state.board.finalizedFrameworks);\r\n  const isEnd = useSelector((state) => state.board.isEnd);\r\n\r\n  const dispatch = useDispatch();\r\n  const isStarted = finalList.length !== 0;\r\n\r\n  const [{ running, lapse }, setState] = useReducer(reducer, {\r\n    running: false,\r\n    lapse: 0\r\n  });\r\n  const intervalRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (isEnd) {\r\n      clearInterval(intervalRef.current);\r\n    }\r\n  }, [isEnd]);\r\n\r\n  useEffect(() => {\r\n    return () => clearInterval(intervalRef.current);\r\n  }, []);\r\n\r\n  const startGameHandler = () => {\r\n    dispatch(actions.setCards());\r\n    if (running) {\r\n      clearInterval(intervalRef.current);\r\n    } else {\r\n      const startTime = Date.now() - lapse;\r\n      intervalRef.current = setInterval(() => {\r\n        setState({ lapse: Date.now() - startTime });\r\n      }, 0);\r\n    }\r\n    setState({ running: !running });\r\n  };\r\n\r\n  const resetGameHandler = () => {\r\n    clearInterval(intervalRef.current);\r\n    setState({ lapse: 0, running: false });\r\n    dispatch(actions.resetGame());\r\n  };\r\n\r\n  return (\r\n    <div className='options'>\r\n      <Stopwatch lapse={lapse} />\r\n      <button\r\n        className={`options__btn ${isStarted ? 'disabled' : null}`}\r\n        onClick={startGameHandler}\r\n        disabled={isStarted}>\r\n        START\r\n      </button>\r\n      <button\r\n        className={`options__btn ${!isStarted ? 'disabled' : null}`}\r\n        disabled={!isStarted}\r\n        onClick={resetGameHandler}>\r\n        RESET\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Options;\r\n","import React from 'react';\nimport Board from './components/Board';\nimport Options from './components/Options';\n\nconst App = () => {\n  return (\n    <div className='app'>\n      <div className='app__header'>Matching Cards</div>\n      <Options />\n      <Board />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n  SET_CARDS,\r\n  HANDLE_CARD_CLICK,\r\n  CHECK_EQUALITY,\r\n  RESET_GAME\r\n} from '../actions/board';\r\n\r\nconst INITIAL_STATE = {\r\n  frameworks: [\r\n    'angular2',\r\n    'vue',\r\n    'react',\r\n    'grunt',\r\n    'phantomjs',\r\n    'ember',\r\n    'babel',\r\n    'ionic',\r\n    'gulp',\r\n    'meteor',\r\n    'yeoman',\r\n    'yarn',\r\n    'nodejs',\r\n    'bower',\r\n    'browserify'\r\n  ],\r\n  duplicatedFrameworks: [],\r\n  randomizedFrameworks: [],\r\n  finalizedFrameworks: [],\r\n  openedFrameworks: [],\r\n  isEnd: false\r\n};\r\n\r\nconst reducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case RESET_GAME:\r\n      return {\r\n        ...INITIAL_STATE,\r\n        isEnd: true\r\n      };\r\n    case HANDLE_CARD_CLICK:\r\n      //თუ პირველი გახსნაა\r\n      const index = action.index;\r\n      const framework = {\r\n        name: action.name,\r\n        index: index\r\n      };\r\n\r\n      let finalsList = [...state.finalizedFrameworks]; // აკოპირებს გამოცნობილებს\r\n      let frameworks = [...state.openedFrameworks]; // აკოპირებს გახსნილებს სულ\r\n\r\n      finalsList[index].close = false; // ეს ფრეიმვორკი გახსნილია classname=\"opened\"\r\n      frameworks.push(framework); //გახსნილ ფრეიმვორკებში ამატებს ამ არჩეულს\r\n      return {\r\n        //ამ ცვლილებებით ცვლის სტეიტს\r\n        ...state,\r\n        openedFrameworks: frameworks,\r\n        finalizedFrameworks: finalsList\r\n      };\r\n    case SET_CARDS:\r\n      let finalizedFrameworks = []; // სსაბოლოო\r\n      let duplicatedFrameworks = state.frameworks.concat(state.frameworks); // ვაკეთებთ წყვილებს\r\n      let randomizedFrameworks = action.shuffle(duplicatedFrameworks); // აურიოს\r\n      randomizedFrameworks.map((name) => {\r\n        return finalizedFrameworks.push({\r\n          name,\r\n          close: true,\r\n          complete: false\r\n        });\r\n      });\r\n      return {\r\n        ...state,\r\n        isEnd: false,\r\n        randomizedFrameworks: randomizedFrameworks,\r\n        finalizedFrameworks: finalizedFrameworks,\r\n        duplicatedFrameworks: duplicatedFrameworks\r\n      };\r\n    case CHECK_EQUALITY:\r\n      let finalFrameworks = [...state.finalizedFrameworks]; // აკოპირებს გამოცნობილებს\r\n\r\n      if (\r\n        //თუ ფრეიმვორკების სახელები ემთხვევა დაა ისინი სხვადასხვა პოზიციაზეე არიააან\r\n        state.openedFrameworks[0].name &&\r\n        state.openedFrameworks[0].name === state.openedFrameworks[1].name &&\r\n        state.openedFrameworks[0].index !== state.openedFrameworks[1].index\r\n      ) {\r\n        finalFrameworks[state.openedFrameworks[0].index].complete = true; // classname=\" matched\"\r\n        finalFrameworks[state.openedFrameworks[1].index].complete = true; // classname=\" matched\"\r\n      } else {\r\n        //თუ მათი სახელები არ ემთხვევაა ორივეს კლასნეიმში 'opened' იცვლება ''-თ\r\n        finalFrameworks[state.openedFrameworks[0].index].close = true;\r\n        finalFrameworks[state.openedFrameworks[1].index].close = true;\r\n      }\r\n\r\n      const isEnd =\r\n        finalFrameworks.length === 0 ||\r\n        finalFrameworks.every((item) => {\r\n          return item.complete === true;\r\n        });\r\n\r\n      return {\r\n        ...state,\r\n        isEnd: isEnd,\r\n        finalizedFrameworks: finalFrameworks,\r\n        openedFrameworks: []\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './sass/main.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers, compose } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport boardReducer from './redux/reducers/board';\n\nconst rootReducer = combineReducers({\n  board: boardReducer\n});\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunk))\n);\n\nconst app = (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(app, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}